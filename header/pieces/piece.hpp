#ifndef __PIECE_HPP__
#define __PIECE_HPP__

#include <string>
#include <vector>

class Game;

class piece{
	private:
		/*
			-true = white
			-false = black
			-used by game to check whether current piece can be selected
			-used in piece to determine if a move is valid
		*/
		bool _color;

		/*
			-string is a directory to pieces png sprite representation
			-used in game to identify a piece
			-used by GUI to determine how to render a piece
			-should not be changed after creation
		*/
		std::string _icon;

		/*
			-stores moves generated by updatePossibleMoves
			-used by Game to highlight squares
		*/
		std::vector<std::pair<int, int>> _possibleMoves;

		/*
			-stores whether thepiece has moved
			-used by pawn, king, and rook to check for special move cases
			-updated by game
		*/
		bool _hasMoved;
		
		/*
			-used by updatePossibleMoves to check if square are legal move spaces
			-should not be deleted by piece destructor
			-should not be changed by piece at any point
		*/
		Game* _game;

	public:
		//constructors
		piece();
		piece(bool color, std::string icon, Game* game);
	
		//destructors
		~piece();
	
		//accessors
		virtual bool getColor();
		virtual std::string getIcon();
		virtual std::vector<std::pair<int, int>>* getPossibleMoves();
		virtual bool getHasMoved();
		virtual Game* getGame();
	
		//mutators
		virtual void setColor(bool color);
		virtual void setHasMoved(bool hasMoved);
	
		virtual void updatePossibleMoves(std::pair<int, int> position) = 0;
};

#include "../game.hpp"

#endif //__PIECE_HPP__//

